/**Copyright(c)2016DavidLamparter,forNetDEF,Inc.**Permissionisherebygranted,free
ofcharge,toanypersonobtaininga*copyofthissoftwareandassociateddocumentationfiles
(the"Software"),*todealintheSoftwarewithoutrestriction,includingwithoutlimitatio
n*therightstouse,copy,modify,merge,publish,distribute,sublicense,*and/orsellcopi
esoftheSoftware,andtopermitpersonstowhomthe*Softwareisfurnishedtodoso,subjecttot
hefollowingconditions:**Theabovecopyrightnoticeandthispermissionnoticeshallbeinc
ludedin*allcopiesorsubstantialportionsoftheSoftware.**THESOFTWAREISPROVIDED"ASIS
",WITHOUTWARRANTYOFANYKIND,EXPRESSOR*IMPLIED,INCLUDINGBUTNOTLIMITEDTOTHEWARRANTI
ESOFMERCHANTABILITY,*FITNESSFORAPARTICULARPURPOSEANDNONINFRINGEMENT.INNOEVENTSHA
LL*THEAUTHORSORCOPYRIGHTHOLDERSBELIABLEFORANYCLAIM,DAMAGESOROTHER*LIABILITY,WHET
HERINANACTIONOFCONTRACT,TORTOROTHERWISE,ARISING*FROM,OUTOFORINCONNECTIONWITHTHES
OFTWAREORTHEUSEOROTHER*DEALINGSINTHESOFTWARE.*/#ifndef_FRR_HOOK_H#define_FRR_HOO
K_H#include<stdbool.h>#include"module.h"#include"memory.h"/*type-safesubscribabl
ehookpoints**where"type-safe"appliestothefunctionpointersusedforsubscriptions**o
verallusage:*-tocreateahook:**mydaemon.h:*#include"hook.h"*DECLARE_HOOK(some_upd
ate_event,(structeventinfo*info),(info))**mydaemon.c:*DEFINE_HOOK(some_update_ev
ent,(structeventinfo*info),(info))*...*hook_call(some_update_event,info)**Note:t
hesecondandthirdmacroargsmustbethehookfunction's*parameterlist,withthesamenamesf
oreachparameter.Thesecond*macroargiswithtypes(usedfordefiningthings),thethirdarg
is*justthenames(usedforpassingalongparameters).**Donotuseparameternamesstartingw
ith"hook",thesecancollidewith*namesusedbythehookcodeitself.**Thereturnvalueisalw
ays"int"fornow;hook_callwillsumupthe*returnvaluesfromeachregistereduser.Defaulti
s0.**Therearenopre-definedsemanticsforthevalue,inmostcasesitis*ignored.Forsucces
s/failureindication,0shouldbesuccess,and*handlersshouldmakesuretoonlyreturn0or1(
not-1orothervalues).***-touseahook/createahandler:**#include"mydaemon.h"*inteven
t_handler(structeventinfo*info){...}*hook_register(some_update_event,event_handl
er);**or,ifyouneedanargumenttobepassedalong(addonptrwillbeadded*asfirstargumentw
hencallingthehandler):**#include"mydaemon.h"*intevent_handler(void*addonptr,stru
cteventinfo*info){...}*hook_register_arg(some_update_event,event_handler,addonpt
r);**(addonptrisn'ttypesafe,butthatshouldbemanageable.)**Hooksalsosupporta"prior
ity"valuefororderingregisteredcalls*relativetoeachother.Thepriorityisasignedinte
gerwherelower*valuesarecalledearlier.Thereisalso"Koohs",whichishookswith*reverse
priorityordering(forcleanup/deinithooks,soyoucanusethe*samepriorityvalue).**Reco
mmendedpriorityvaluerangesare:**-999...0...999-mainexecutable/daemon,orlibrary*-
1999...-1000-modulesregisteringcallsthatshouldrunbefore*thedaemon'sbits*1000...1
999-modulescallsthatshouldrunafterdaemon's**Note:thedefaultvalueis1000,basedonth
efollowing2expectations:*-mosthook_register()usagewillbeinloadablemodules*-usage
ofhook_register()inthedaemonitselfmayneedrelativeordering*toitself,makinganexpli
citvaluetheexpectedcase**Thepriorityvalueispassedasextraargumentonhook_register_
prio()/*hook_register_arg_prio().Whetherahookrunsinreverseisdetermined*solelybyt
hecodedefining/callingthehook.(DECLARE_KOOHisactually*thesamethingasDECLARE_HOOK
,it'sjusttheretomakeitobvious.)*//*TODO:*-hook_unregister_all_module()*-introspe
ction/CLI/debug*-testcases;)**Forloadablemodules,theideaisthathookscouldbeautoma
tically*unregisteredwhenamoduleisunloaded.**It'salsopossibletoaddaconstructor(MT
YPEstyle)toDEFINE_HOOK,*whichwouldmakeitpossiblefortheCLItoshowallhooksandall*re
gisteredhandlers.*/structhookent{structhookent*next;void*hookfn;/*actuallyafunct
ionpointer*/void*hookarg;boolhas_arg;intpriority;structfrrmod_runtime*module;con
stchar*fnname;};structhook{constchar*name;structhookent*entries;boolreverse;};#d
efineHOOK_DEFAULT_PRIORITY1000/*subscribe/addcallbackfunctiontoahook**alwaysuseh
ook_register(),whichusesthestaticinlinehelperfrom*DECLARE_HOOKinordertogettypesa
fety*/externvoid_hook_register(structhook*hook,void*funcptr,void*arg,boolhas_arg
,structfrrmod_runtime*module,constchar*funcname,intpriority);#definehook_registe
r(hookname,func)\_hook_register(&_hook_##hookname,_hook_typecheck_##hookname(fun
c),\NULL,false,THIS_MODULE,#func,HOOK_DEFAULT_PRIORITY)#definehook_register_arg(
hookname,func,arg)\_hook_register(&_hook_##hookname,\_hook_typecheck_arg_##hookn
ame(func),arg,true,\THIS_MODULE,#func,HOOK_DEFAULT_PRIORITY)#definehook_register
_prio(hookname,prio,func)\_hook_register(&_hook_##hookname,_hook_typecheck_##hoo
kname(func),\NULL,false,THIS_MODULE,#func,prio)#definehook_register_arg_prio(hoo
kname,prio,func,arg)\_hook_register(&_hook_##hookname,\_hook_typecheck_arg_##hoo
kname(func),arg,true,\THIS_MODULE,#func,prio)externvoid_hook_unregister(structho
ok*hook,void*funcptr,void*arg,boolhas_arg);#definehook_unregister(hookname,func)
\_hook_unregister(&_hook_##hookname,_hook_typecheck_##hookname(func),\NULL,false
)#definehook_unregister_arg(hookname,func,arg)\_hook_unregister(&_hook_##hooknam
e,\_hook_typecheck_arg_##hookname(func),arg,true)/*invokehooks*thisisprivate(sta
tic)tothefilethathastheDEFINE_HOOKstatement*/#definehook_call(hookname,...)hook_
call_##hookname(__VA_ARGS__)/*helperstoaddthevoid*arg*/#defineHOOK_ADDDEF(...)(v
oid*hookarg,##__VA_ARGS__)#defineHOOK_ADDARG(...)(hookarg,##__VA_ARGS__)/*useinh
eaderfile-declaresthehookanditsarguments*usage:DECLARE_HOOK(my_hook,(intarg1,str
uctfoo*arg2),(arg1,arg2))*asabove,"passlist"mustusethesameorderandsamenamesas"ar
glist"**theoreticallypasslistisnotneccessary,butlet'skeepthingssimpleand*useexac
tsameargsonDECLAREandDEFINE.*/#defineDECLARE_HOOK(hookname,arglist,passlist)\ext
ernstructhook_hook_##hookname;\__attribute__((unused))staticvoid*_hook_typecheck
_##hookname(\int(*funcptr)arglist)\{\return(void*)funcptr;\}\__attribute__((unus
ed))staticvoid*_hook_typecheck_arg_##hookname(\int(*funcptr)HOOK_ADDDEFarglist)\
{\return(void*)funcptr;\}#defineDECLARE_KOOH(hookname,arglist,passlist)\DECLARE_
HOOK(hookname,arglist,passlist)/*useinsourcefile-containshook-relateddefinitions
.*/#defineDEFINE_HOOK_INT(hookname,arglist,passlist,rev)\structhook_hook_##hookn
ame={\.name=#hookname,.entries=NULL,.reverse=rev,\};\staticinthook_call_##hookna
mearglist\{\inthooksum=0;\structhookent*he=_hook_##hookname.entries;\void*hookar
g;\union{\void*voidptr;\int(*fptr)arglist;\int(*farg)HOOK_ADDDEFarglist;\}hookp;
\for(;he;he=he->next){\hookarg=he->hookarg;\hookp.voidptr=he->hookfn;\if(!he->ha
s_arg)\hooksum+=hookp.fptrpasslist;\else\hooksum+=hookp.fargHOOK_ADDARGpasslist;
\}\returnhooksum;\}#defineDEFINE_HOOK(hookname,arglist,passlist)\DEFINE_HOOK_INT
(hookname,arglist,passlist,false)#defineDEFINE_KOOH(hookname,arglist,passlist)\D
EFINE_HOOK_INT(hookname,arglist,passlist,true)#endif/*_FRR_HOOK_H*/