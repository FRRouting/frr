/**NSrelatedheader.*Copyright(C)20146WINDS.A.**ThisfileispartofGNUZebra.**GNUZeb
raisfreesoftware;youcanredistributeitand/ormodify*itunderthetermsoftheGNUGeneral
PublicLicenseaspublished*bytheFreeSoftwareFoundation;eitherversion2,or(atyour*op
tion)anylaterversion.**GNUZebraisdistributedinthehopethatitwillbeuseful,but*WITH
OUTANYWARRANTY;withouteventheimpliedwarrantyof*MERCHANTABILITYorFITNESSFORAPARTI
CULARPURPOSE.SeetheGNU*GeneralPublicLicenseformoredetails.**Youshouldhavereceive
dacopyoftheGNUGeneralPublicLicensealong*withthisprogram;seethefileCOPYING;ifnot,
writetotheFreeSoftware*Foundation,Inc.,51FranklinSt,FifthFloor,Boston,MA02110-13
01USA*/#ifndef_ZEBRA_NS_H#define_ZEBRA_NS_H#include"openbsd-tree.h"#include"link
list.h"#include"vty.h"typedefuint32_tns_id_t;/*thedefaultNSID*/#defineNS_UNKNOWN
UINT32_MAX/*Defaultnetnsdirectory(Linux)*/#defineNS_RUN_DIR"/var/run/netns"#ifde
fHAVE_NETNS#defineNS_DEFAULT_NAME"/proc/self/ns/net"#else/*!HAVE_NETNS*/#defineN
S_DEFAULT_NAME"Default-logical-router"#endif/*HAVE_NETNS*/structns{RB_ENTRY(ns)e
ntry;/*Identifier,sameasthevectorindex*/ns_id_tns_id;/*Name*/char*name;/*Filedes
criptor*/intfd;/*MasterlistofinterfacesbelongingtothisNS*/structlist*iflist;/*Ba
ckPointertoVRF*/void*vrf_ctxt;/*Userdata*/void*info;};RB_HEAD(ns_head,ns);RB_PRO
TOTYPE(ns_head,ns,entry,ns_compare)externstructns_headns_tree;/**APIformanagingN
ETNS.egfromzebradaemon*onewanttomanagethelistofNETNS,etc...*//**NShooks*/#define
NS_NEW_HOOK0/*anewlogical-routerisjustcreated*/#defineNS_DELETE_HOOK1/*alogical-
routeristobedeleted*/#defineNS_ENABLE_HOOK2/*alogical-routerisreadytouse*/#defin
eNS_DISABLE_HOOK3/*alogical-routeristobeunusable*//**Addaspecifichooknsmodule.*@
param1:hooktype*@param2:thecallbackfunction*-param1:theNSID*-param2:theaddressof
theuserdatapointer(theuserdata*canbestoredinorfreedfromthere)*/externvoidns_add_
hook(inttype,int(*)(structns*));/**NSinitializer/destructor*/externvoidns_termin
ate(void);/*APItoinitializeNETNSmanagerment*parameteristhedefaultns_id*/externvo
idns_init_management(ns_id_tns_id);/**NSutilities*//*Createasocketservingfortheg
ivenNS*/intns_socket(intdomain,inttype,intprotocol,ns_id_tns_id);/*returnthepath
oftheNETNS*/externchar*ns_netns_pathname(structvty*vty,constchar*name);/*Parsean
dexecuteafunctiononalltheNETNS*/externvoidns_walk_func(int(*func)(structns*));/*
APItogettheNETNSname,fromthenspointer*/externconstchar*ns_get_name(structns*ns);
/*onlycalledfromvrf(whenremovingnetnsfromvrf)*oratVRForlogicalroutertermination*
/externvoidns_delete(structns*ns);/*return>0ifnetnsisavailable*calledbyVRFtochec
knetnsbackendisavailableforVRF*/externintns_have_netns(void);/*APItogetcontextin
formationofaNS*/externvoid*ns_info_lookup(ns_id_tns_id);/**NSinitroutine*shouldb
ecalledfrombackendx*/externvoidns_init(void);/*APItoretrievedefaultNS*/externns_
id_tns_get_default_id(void);#defineNS_DEFAULTns_get_default_id()/*APIthatcanbeus
edtochangefromNS*/externintns_switchback_to_initial(void);externintns_switch_to_
netns(constchar*netns_name);/**NShandlingroutines.*calledbymodulesthatuseNSbacke
nd*//*APItosearchforalreadypresentNETNS*/externstructns*ns_lookup(ns_id_tns_id);
externstructns*ns_lookup_name(constchar*name);/*APItohandleNS:creation,enable,di
sable*forenable,acallbackfunctionispassedasparameter*thecallbackbelongstothemodu
lethatusesNSasbackend*uponenablingtheNETNS,theupperlayerisinformed*/externintns_
enable(structns*ns,void(*func)(ns_id_t,void*));externstructns*ns_get_created(str
uctns*ns,char*name,ns_id_tns_id);externvoidns_disable(structns*ns);#endif/*_ZEBR
A_NS_H*/