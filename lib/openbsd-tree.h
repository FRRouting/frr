/*$OpenBSD:tree.h,v1.142015/05/2503:07:49deraadtExp$*//**Copyright2002NielsProvo
s<provos@citi.umich.edu>*Allrightsreserved.**Redistributionanduseinsourceandbina
ryforms,withorwithout*modification,arepermittedprovidedthatthefollowingcondition
s*aremet:*1.Redistributionsofsourcecodemustretaintheabovecopyright*notice,thisli
stofconditionsandthefollowingdisclaimer.*2.Redistributionsinbinaryformmustreprod
ucetheabovecopyright*notice,thislistofconditionsandthefollowingdisclaimerinthe*d
ocumentationand/orothermaterialsprovidedwiththedistribution.**THISSOFTWAREISPROV
IDEDBYTHEAUTHOR``ASIS''ANDANYEXPRESSOR*IMPLIEDWARRANTIES,INCLUDING,BUTNOTLIMITED
TO,THEIMPLIEDWARRANTIES*OFMERCHANTABILITYANDFITNESSFORAPARTICULARPURPOSEAREDISCL
AIMED.*INNOEVENTSHALLTHEAUTHORBELIABLEFORANYDIRECT,INDIRECT,*INCIDENTAL,SPECIAL,
EXEMPLARY,ORCONSEQUENTIALDAMAGES(INCLUDING,BUT*NOTLIMITEDTO,PROCUREMENTOFSUBSTIT
UTEGOODSORSERVICES;LOSSOFUSE,*DATA,ORPROFITS;ORBUSINESSINTERRUPTION)HOWEVERCAUSE
DANDONANY*THEORYOFLIABILITY,WHETHERINCONTRACT,STRICTLIABILITY,ORTORT*(INCLUDINGN
EGLIGENCEOROTHERWISE)ARISINGINANYWAYOUTOFTHEUSEOF*THISSOFTWARE,EVENIFADVISEDOFTH
EPOSSIBILITYOFSUCHDAMAGE.*/#ifndef_SYS_TREE_H_#define_SYS_TREE_H_/**Thisfiledefi
nesdatastructuresfordifferenttypesoftrees:*splaytreesandred-blacktrees.**Asplayt
reeisaself-organizingdatastructure.Everyoperation*onthetreecausesasplaytohappen.
Thesplaymovestherequested*nodetotherootofthetreeandpartlyrebalancesit.**Thishast
hebenefitthatrequestlocalitycausesfasterlookupsas*therequestednodesmovetothetopo
fthetree.Ontheotherhand,*everylookupcausesmemorywrites.**TheBalanceTheorembounds
thetotalaccesstimeformoperations*andninsertsonaninitiallyemptytreeasO((m+n)lgn).
The*amortizedcostforasequenceofmaccessestoasplaytreeisO(lgn);**Ared-blacktreeisa
binarysearchtreewiththenodecolorasan*extraattribute.Itfulfillsasetofconditions:*
-everysearchpathfromtheroottoaleafconsistsofthe*samenumberofblacknodes,*-eachred
node(exceptfortheroot)hasablackparent,*-eachleafnodeisblack.**Everyoperationonar
ed-blacktreeisboundedasO(lgn).*Themaximumheightofared-blacktreeis2lg(n+1).*/#def
ineSPLAY_HEAD(name,type)\structname{\structtype*sph_root;/*rootofthetree*/\}#def
ineSPLAY_INITIALIZER(root)\{\NULL\}#defineSPLAY_INIT(root)\do{\(root)->sph_root=
NULL;\}while(0)#defineSPLAY_ENTRY(type)\struct{\structtype*spe_left;/*leftelemen
t*/\structtype*spe_right;/*rightelement*/\}#defineSPLAY_LEFT(elm,field)(elm)->fi
eld.spe_left#defineSPLAY_RIGHT(elm,field)(elm)->field.spe_right#defineSPLAY_ROOT
(head)(head)->sph_root#defineSPLAY_EMPTY(head)(SPLAY_ROOT(head)==NULL)/*SPLAY_RO
TATE_{LEFT,RIGHT}expectthattmpholdSPLAY_{RIGHT,LEFT}*/#defineSPLAY_ROTATE_RIGHT(
head,tmp,field)\do{\SPLAY_LEFT((head)->sph_root,field)=SPLAY_RIGHT(tmp,field);\S
PLAY_RIGHT(tmp,field)=(head)->sph_root;\(head)->sph_root=tmp;\}while(0)#defineSP
LAY_ROTATE_LEFT(head,tmp,field)\do{\SPLAY_RIGHT((head)->sph_root,field)=SPLAY_LE
FT(tmp,field);\SPLAY_LEFT(tmp,field)=(head)->sph_root;\(head)->sph_root=tmp;\}wh
ile(0)#defineSPLAY_LINKLEFT(head,tmp,field)\do{\SPLAY_LEFT(tmp,field)=(head)->sp
h_root;\tmp=(head)->sph_root;\(head)->sph_root=SPLAY_LEFT((head)->sph_root,field
);\}while(0)#defineSPLAY_LINKRIGHT(head,tmp,field)\do{\SPLAY_RIGHT(tmp,field)=(h
ead)->sph_root;\tmp=(head)->sph_root;\(head)->sph_root=SPLAY_RIGHT((head)->sph_r
oot,field);\}while(0)#defineSPLAY_ASSEMBLE(head,node,left,right,field)\do{\SPLAY
_RIGHT(left,field)=\SPLAY_LEFT((head)->sph_root,field);\SPLAY_LEFT(right,field)=
\SPLAY_RIGHT((head)->sph_root,field);\SPLAY_LEFT((head)->sph_root,field)=\SPLAY_
RIGHT(node,field);\SPLAY_RIGHT((head)->sph_root,field)=\SPLAY_LEFT(node,field);\
}while(0)/*Generatesprototypesandinlinefunctions*/#defineSPLAY_PROTOTYPE(name,ty
pe,field,cmp)\voidname##_SPLAY(structname*,structtype*);\voidname##_SPLAY_MINMAX
(structname*,int);\structtype*name##_SPLAY_INSERT(structname*,structtype*);\stru
cttype*name##_SPLAY_REMOVE(structname*,structtype*);\\/*Findsthenodewiththesamek
eyaselm*/\static__inlinestructtype*name##_SPLAY_FIND(structname*head,\structtype
*elm)\{\if(SPLAY_EMPTY(head))\return(NULL);\name##_SPLAY(head,elm);\if((cmp)(elm
,(head)->sph_root)==0)\return(head->sph_root);\return(NULL);\}\\static__inlinest
ructtype*name##_SPLAY_NEXT(structname*head,\structtype*elm)\{\name##_SPLAY(head,
elm);\if(SPLAY_RIGHT(elm,field)!=NULL){\elm=SPLAY_RIGHT(elm,field);\while(SPLAY_
LEFT(elm,field)!=NULL){\elm=SPLAY_LEFT(elm,field);\}\}else\elm=NULL;\return(elm)
;\}\\static__inlinestructtype*name##_SPLAY_MIN_MAX(structname*head,\intval)\{\na
me##_SPLAY_MINMAX(head,val);\return(SPLAY_ROOT(head));\}/*Mainsplayoperation.*Mo
vesnodeclosetothekeyofelmtotop*/#defineSPLAY_GENERATE(name,type,field,cmp)\struc
ttype*name##_SPLAY_INSERT(structname*head,structtype*elm)\{\if(SPLAY_EMPTY(head)
){\SPLAY_LEFT(elm,field)=SPLAY_RIGHT(elm,field)=\NULL;\}else{\int__comp;\name##_
SPLAY(head,elm);\__comp=(cmp)(elm,(head)->sph_root);\if(__comp<0){\SPLAY_LEFT(el
m,field)=\SPLAY_LEFT((head)->sph_root,field);\SPLAY_RIGHT(elm,field)=(head)->sph
_root;\SPLAY_LEFT((head)->sph_root,field)=NULL;\}elseif(__comp>0){\SPLAY_RIGHT(e
lm,field)=\SPLAY_RIGHT((head)->sph_root,field);\SPLAY_LEFT(elm,field)=(head)->sp
h_root;\SPLAY_RIGHT((head)->sph_root,field)=NULL;\}else\return((head)->sph_root)
;\}\(head)->sph_root=(elm);\return(NULL);\}\\structtype*name##_SPLAY_REMOVE(stru
ctname*head,structtype*elm)\{\structtype*__tmp;\if(SPLAY_EMPTY(head))\return(NUL
L);\name##_SPLAY(head,elm);\if((cmp)(elm,(head)->sph_root)==0){\if(SPLAY_LEFT((h
ead)->sph_root,field)==NULL){\(head)->sph_root=\SPLAY_RIGHT((head)->sph_root,fie
ld);\}else{\__tmp=SPLAY_RIGHT((head)->sph_root,field);\(head)->sph_root=\SPLAY_L
EFT((head)->sph_root,field);\name##_SPLAY(head,elm);\SPLAY_RIGHT((head)->sph_roo
t,field)=__tmp;\}\return(elm);\}\return(NULL);\}\\voidname##_SPLAY(structname*he
ad,structtype*elm)\{\structtype__node,*__left,*__right,*__tmp;\int__comp;\\SPLAY
_LEFT(&__node,field)=SPLAY_RIGHT(&__node,field)=\NULL;\__left=__right=&__node;\\
while((__comp=(cmp)(elm,(head)->sph_root))){\if(__comp<0){\__tmp=SPLAY_LEFT((hea
d)->sph_root,field);\if(__tmp==NULL)\break;\if((cmp)(elm,__tmp)<0){\SPLAY_ROTATE
_RIGHT(head,__tmp,\field);\if(SPLAY_LEFT((head)->sph_root,\field)\==NULL)\break;
\}\SPLAY_LINKLEFT(head,__right,field);\}elseif(__comp>0){\__tmp=SPLAY_RIGHT((hea
d)->sph_root,field);\if(__tmp==NULL)\break;\if((cmp)(elm,__tmp)>0){\SPLAY_ROTATE
_LEFT(head,__tmp,field);\if(SPLAY_RIGHT((head)->sph_root,\field)\==NULL)\break;\
}\SPLAY_LINKRIGHT(head,__left,field);\}\}\SPLAY_ASSEMBLE(head,&__node,__left,__r
ight,field);\}\\/*Splaywitheithertheminimumorthemaximumelement\*Usedtofindminimu
mormaximumelementintree.\*/\voidname##_SPLAY_MINMAX(structname*head,int__comp)\{
\structtype__node,*__left,*__right,*__tmp;\\SPLAY_LEFT(&__node,field)=SPLAY_RIGH
T(&__node,field)=\NULL;\__left=__right=&__node;\\while(1){\if(__comp<0){\__tmp=S
PLAY_LEFT((head)->sph_root,field);\if(__tmp==NULL)\break;\if(__comp<0){\SPLAY_RO
TATE_RIGHT(head,__tmp,\field);\if(SPLAY_LEFT((head)->sph_root,\field)\==NULL)\br
eak;\}\SPLAY_LINKLEFT(head,__right,field);\}elseif(__comp>0){\__tmp=SPLAY_RIGHT(
(head)->sph_root,field);\if(__tmp==NULL)\break;\if(__comp>0){\SPLAY_ROTATE_LEFT(
head,__tmp,field);\if(SPLAY_RIGHT((head)->sph_root,\field)\==NULL)\break;\}\SPLA
Y_LINKRIGHT(head,__left,field);\}\}\SPLAY_ASSEMBLE(head,&__node,__left,__right,f
ield);\}#defineSPLAY_NEGINF-1#defineSPLAY_INF1#defineSPLAY_INSERT(name,x,y)name#
#_SPLAY_INSERT(x,y)#defineSPLAY_REMOVE(name,x,y)name##_SPLAY_REMOVE(x,y)#defineS
PLAY_FIND(name,x,y)name##_SPLAY_FIND(x,y)#defineSPLAY_NEXT(name,x,y)name##_SPLAY
_NEXT(x,y)#defineSPLAY_MIN(name,x)\(SPLAY_EMPTY(x)?NULL:name##_SPLAY_MIN_MAX(x,S
PLAY_NEGINF))#defineSPLAY_MAX(name,x)\(SPLAY_EMPTY(x)?NULL:name##_SPLAY_MIN_MAX(
x,SPLAY_INF))#defineSPLAY_FOREACH(x,name,head)\for((x)=SPLAY_MIN(name,head);(x)!
=NULL;\(x)=SPLAY_NEXT(name,head,x))/**Copyright(c)2016DavidGwynne<dlg@openbsd.or
g>**Permissiontouse,copy,modify,anddistributethissoftwareforany*purposewithorwit
houtfeeisherebygranted,providedthattheabove*copyrightnoticeandthispermissionnoti
ceappearinallcopies.**THESOFTWAREISPROVIDED"ASIS"ANDTHEAUTHORDISCLAIMSALLWARRANT
IES*WITHREGARDTOTHISSOFTWAREINCLUDINGALLIMPLIEDWARRANTIESOF*MERCHANTABILITYANDFI
TNESS.INNOEVENTSHALLTHEAUTHORBELIABLEFOR*ANYSPECIAL,DIRECT,INDIRECT,ORCONSEQUENT
IALDAMAGESORANYDAMAGES*WHATSOEVERRESULTINGFROMLOSSOFUSE,DATAORPROFITS,WHETHERINA
N*ACTIONOFCONTRACT,NEGLIGENCEOROTHERTORTIOUSACTION,ARISINGOUTOF*ORINCONNECTIONWI
THTHEUSEORPERFORMANCEOFTHISSOFTWARE.*/#defineRB_BLACK0#defineRB_RED1structrb_typ
e{int(*t_compare)(constvoid*,constvoid*);void(*t_augment)(void*);unsignedintt_of
fset;/*offsetofrb_entryintype*/};structrbt_tree{structrb_entry*rbt_root;};struct
rb_entry{structrb_entry*rbt_parent;structrb_entry*rbt_left;structrb_entry*rbt_ri
ght;unsignedintrbt_color;};#defineRB_HEAD(_name,_type)\struct_name{\structrbt_tr
eerbh_root;\}#defineRB_ENTRY(_type)structrb_entrystaticinlinevoid_rb_init(struct
rbt_tree*rbt){rbt->rbt_root=NULL;}staticinlineint_rb_empty(structrbt_tree*rbt){r
eturn(rbt->rbt_root==NULL);}void*_rb_insert(conststructrb_type*,structrbt_tree*,
void*);void*_rb_remove(conststructrb_type*,structrbt_tree*,void*);void*_rb_find(
conststructrb_type*,structrbt_tree*,constvoid*);void*_rb_nfind(conststructrb_typ
e*,structrbt_tree*,constvoid*);void*_rb_root(conststructrb_type*,structrbt_tree*
);void*_rb_min(conststructrb_type*,structrbt_tree*);void*_rb_max(conststructrb_t
ype*,structrbt_tree*);void*_rb_next(conststructrb_type*,void*);void*_rb_prev(con
ststructrb_type*,void*);void*_rb_left(conststructrb_type*,void*);void*_rb_right(
conststructrb_type*,void*);void*_rb_parent(conststructrb_type*,void*);void_rb_se
t_left(conststructrb_type*,void*,void*);void_rb_set_right(conststructrb_type*,vo
id*,void*);void_rb_set_parent(conststructrb_type*,void*,void*);void_rb_poison(co
nststructrb_type*,void*,unsignedlong);int_rb_check(conststructrb_type*,void*,uns
ignedlong);#defineRB_INITIALIZER(_head){{NULL}}#defineRB_PROTOTYPE(_name,_type,_
field,_cmp)\externconststructrb_type*const_name##_RB_TYPE;\\__attribute__((__unu
sed__))staticinlinevoid_name##_RB_INIT(\struct_name*head)\{\_rb_init(&head->rbh_
root);\}\\__attribute__((__unused__))staticinlinestruct_type\*_name##_RB_INSERT(
struct_name*head,struct_type*elm)\{\return_rb_insert(_name##_RB_TYPE,&head->rbh_
root,elm);\}\\__attribute__((__unused__))staticinlinestruct_type\*_name##_RB_REM
OVE(struct_name*head,struct_type*elm)\{\return_rb_remove(_name##_RB_TYPE,&head->
rbh_root,elm);\}\\__attribute__((__unused__))staticinlinestruct_type\*_name##_RB
_FIND(struct_name*head,conststruct_type*key)\{\return_rb_find(_name##_RB_TYPE,&h
ead->rbh_root,key);\}\\__attribute__((__unused__))staticinlinestruct_type\*_name
##_RB_NFIND(struct_name*head,conststruct_type*key)\{\return_rb_nfind(_name##_RB_
TYPE,&head->rbh_root,key);\}\\__attribute__((__unused__))staticinlinestruct_type
\*_name##_RB_ROOT(struct_name*head)\{\return_rb_root(_name##_RB_TYPE,&head->rbh_
root);\}\\__attribute__((__unused__))staticinlineint_name##_RB_EMPTY(\struct_nam
e*head)\{\return_rb_empty(&head->rbh_root);\}\\__attribute__((__unused__))static
inlinestruct_type\*_name##_RB_MIN(struct_name*head)\{\return_rb_min(_name##_RB_T
YPE,&head->rbh_root);\}\\__attribute__((__unused__))staticinlinestruct_type\*_na
me##_RB_MAX(struct_name*head)\{\return_rb_max(_name##_RB_TYPE,&head->rbh_root);\
}\\__attribute__((__unused__))staticinlinestruct_type\*_name##_RB_NEXT(struct_ty
pe*elm)\{\return_rb_next(_name##_RB_TYPE,elm);\}\\__attribute__((__unused__))sta
ticinlinestruct_type\*_name##_RB_PREV(struct_type*elm)\{\return_rb_prev(_name##_
RB_TYPE,elm);\}\\__attribute__((__unused__))staticinlinestruct_type\*_name##_RB_
LEFT(struct_type*elm)\{\return_rb_left(_name##_RB_TYPE,elm);\}\\__attribute__((_
_unused__))staticinlinestruct_type\*_name##_RB_RIGHT(struct_type*elm)\{\return_r
b_right(_name##_RB_TYPE,elm);\}\\__attribute__((__unused__))staticinlinestruct_t
ype\*_name##_RB_PARENT(struct_type*elm)\{\return_rb_parent(_name##_RB_TYPE,elm);
\}\\__attribute__((__unused__))staticinlinevoid_name##_RB_SET_LEFT(\struct_type*
elm,struct_type*left)\{\return_rb_set_left(_name##_RB_TYPE,elm,left);\}\\__attri
bute__((__unused__))staticinlinevoid_name##_RB_SET_RIGHT(\struct_type*elm,struct
_type*right)\{\return_rb_set_right(_name##_RB_TYPE,elm,right);\}\\__attribute__(
(__unused__))staticinlinevoid_name##_RB_SET_PARENT(\struct_type*elm,struct_type*
parent)\{\return_rb_set_parent(_name##_RB_TYPE,elm,parent);\}\\__attribute__((__
unused__))staticinlinevoid_name##_RB_POISON(\struct_type*elm,unsignedlongpoison)
\{\return_rb_poison(_name##_RB_TYPE,elm,poison);\}\\__attribute__((__unused__))s
taticinlineint_name##_RB_CHECK(\struct_type*elm,unsignedlongpoison)\{\return_rb_
check(_name##_RB_TYPE,elm,poison);\}#defineRB_GENERATE_INTERNAL(_name,_type,_fie
ld,_cmp,_aug)\staticint_name##_RB_COMPARE(constvoid*lptr,constvoid*rptr)\{\const
struct_type*l=lptr,*r=rptr;\return_cmp(l,r);\}\staticconststructrb_type_name##_R
B_INFO={\_name##_RB_COMPARE,_aug,offsetof(struct_type,_field),\};\conststructrb_
type*const_name##_RB_TYPE=&_name##_RB_INFO;#defineRB_GENERATE_AUGMENT(_name,_typ
e,_field,_cmp,_aug)\staticvoid_name##_RB_AUGMENT(void*ptr)\{\struct_type*p=ptr;\
return_aug(p);\}\RB_GENERATE_INTERNAL(_name,_type,_field,_cmp,_name##_RB_AUGMENT
)#defineRB_GENERATE(_name,_type,_field,_cmp)\RB_GENERATE_INTERNAL(_name,_type,_f
ield,_cmp,NULL)#defineRB_INIT(_name,_head)_name##_RB_INIT(_head)#defineRB_INSERT
(_name,_head,_elm)_name##_RB_INSERT(_head,_elm)#defineRB_REMOVE(_name,_head,_elm
)_name##_RB_REMOVE(_head,_elm)#defineRB_FIND(_name,_head,_key)_name##_RB_FIND(_h
ead,_key)#defineRB_NFIND(_name,_head,_key)_name##_RB_NFIND(_head,_key)#defineRB_
ROOT(_name,_head)_name##_RB_ROOT(_head)#defineRB_EMPTY(_name,_head)_name##_RB_EM
PTY(_head)#defineRB_MIN(_name,_head)_name##_RB_MIN(_head)#defineRB_MAX(_name,_he
ad)_name##_RB_MAX(_head)#defineRB_NEXT(_name,_elm)_name##_RB_NEXT(_elm)#defineRB
_PREV(_name,_elm)_name##_RB_PREV(_elm)#defineRB_LEFT(_name,_elm)_name##_RB_LEFT(
_elm)#defineRB_RIGHT(_name,_elm)_name##_RB_RIGHT(_elm)#defineRB_PARENT(_name,_el
m)_name##_RB_PARENT(_elm)#defineRB_SET_LEFT(_name,_elm,_l)_name##_RB_SET_LEFT(_e
lm,_l)#defineRB_SET_RIGHT(_name,_elm,_r)_name##_RB_SET_RIGHT(_elm,_r)#defineRB_S
ET_PARENT(_name,_elm,_p)_name##_RB_SET_PARENT(_elm,_p)#defineRB_POISON(_name,_el
m,_p)_name##_RB_POISON(_elm,_p)#defineRB_CHECK(_name,_elm,_p)_name##_RB_CHECK(_e
lm,_p)#defineRB_FOREACH(_e,_name,_head)\for((_e)=RB_MIN(_name,(_head));(_e)!=NUL
L;\(_e)=RB_NEXT(_name,(_e)))#defineRB_FOREACH_SAFE(_e,_name,_head,_n)\for((_e)=R
B_MIN(_name,(_head));\(_e)!=NULL&&((_n)=RB_NEXT(_name,(_e)),1);(_e)=(_n))#define
RB_FOREACH_REVERSE(_e,_name,_head)\for((_e)=RB_MAX(_name,(_head));(_e)!=NULL;\(_
e)=RB_PREV(_name,(_e)))#defineRB_FOREACH_REVERSE_SAFE(_e,_name,_head,_n)\for((_e
)=RB_MAX(_name,(_head));\(_e)!=NULL&&((_n)=RB_PREV(_name,(_e)),1);(_e)=(_n))#end
if/*_SYS_TREE_H_*/