/**UtilitiesandinterfacesformanagingPOSIXthreadswithinFRR.*Copyright(C)2017Cumul
usNetworks,Inc.**Thisprogramisfreesoftware;youcanredistributeitand/ormodify*itun
derthetermsoftheGNUGeneralPublicLicenseaspublishedby*theFreeSoftwareFoundation;e
itherversion2oftheLicense,or*(atyouroption)anylaterversion.**Thisprogramisdistri
butedinthehopethatitwillbeuseful,but*WITHOUTANYWARRANTY;withouteventheimpliedwar
rantyof*MERCHANTABILITYorFITNESSFORAPARTICULARPURPOSE.SeetheGNU*GeneralPublicLic
enseformoredetails.**YoushouldhavereceivedacopyoftheGNUGeneralPublicLicensealong
*withthisprogram;seethefileCOPYING;ifnot,writetotheFreeSoftware*Foundation,Inc.,
51FranklinSt,FifthFloor,Boston,MA02110-1301USA*/#ifndef_FRR_PTHREAD_H#define_FRR
_PTHREAD_H#include<pthread.h>#include"frratomic.h"#include"memory.h"#include"thr
ead.h"DECLARE_MTYPE(FRR_PTHREAD);DECLARE_MTYPE(PTHREAD_PRIM);structfrr_pthread;s
tructfrr_pthread_attr;structfrr_pthread_attr{_Atomicuint32_tid;void*(*start)(voi
d*);int(*stop)(structfrr_pthread*,void**);};structfrr_pthread{/**Mutexprotecting
thisstructure.Mustbetakenforreadingsome*fields,denotedbya'Requires:mtx'.*/pthrea
d_mutex_tmtx;/*pthreadid*/pthread_tthread;/*threadmasterforthispthread'sthread.c
eventloop*/structthread_master*master;/*caller-specifieddata;start&stopfuncs,nam
e,id*/structfrr_pthread_attrattr;/**Notificationmechanismforallowingpthreadstono
tifytheirparents*whentheyarereadytodowork.Thismechanismhastwoassociated*function
s:**-frr_pthread_wait_running()*Thisfunctionshouldbecalledbythespawningthreadaft
er*frr_pthread_run().Itsafelywaitsuntilthespawnedthread*indicatesthatisreadytodo
workbypostingtothecondition*variable.**-frr_pthread_notify_running()*Thisfunctio
nshouldbecalledbythespawnedthreadwhenitis*readytodowork.Itwillwakeupanythreadswa
itingonthe*previouslydescribedcondition.*/pthread_cond_t*running_cond;pthread_mu
tex_t*running_cond_mtx;_Atomicboolrunning;/**Fakethread-specificstorage.Noconstr
aintsonusage.Helpfulwhen*creatingreentrantpthreadimplementations.Canbeusedtopass
*argumenttopthreadentryfunction.**Requires:mtx*/void*data;/**Human-readablethrea
dname.**Requires:mtx*/char*name;};externstructfrr_pthread_attrfrr_pthread_attr_d
efault;/**Initializesthismodule.**Mustbecalledbeforeusinganyoftheotherfunctions.
*/voidfrr_pthread_init(void);/**Uninitializesthismodule.**Destroysallregisteredf
rr_pthread'sandinternaldatastructures.**Itissafetocallfrr_pthread_init()afterthi
sfunctiontoreinitialize*themodule.*/voidfrr_pthread_finish(void);/**Createsanewf
rr_pthreadwiththegivenattributes.**The'attr'argumentshouldbefilledoutwiththedesi
redattributes,*includingID,startandstopfunctionsandthedesiredname.Alternatively,
*ifattrisNULL,thedefaultattributeswillbeused.Thepthreadwillbe*setuptorunabasicth
readmasterloopandthenamewillbe"Anonymous".*Schedulingtasksontothethreadmasterint
he'master'fieldofthereturned*frr_pthreadwillcausethemtorunonthatpthread.**@param
attr-thethreadattributes*@paramname-Human-readablename*@returnthecreatedfrr_pthr
eaduponsuccess,orNULLuponfailure*/structfrr_pthread*frr_pthread_new(structfrr_pt
hread_attr*attr,constchar*name);/**Changesthenameofthefrr_pthread.**@paramfpt-th
efrr_pthreadtooperateon*@paramname-Human-readablename*/voidfrr_pthread_set_name(
structfrr_pthread*fpt,constchar*name);/**Destroysanfrr_pthread.**Assumesthatthea
ssociatedpthread,ifany,hasalreadyterminated.**@paramfpt-thefrr_pthreadtodestroy*
/voidfrr_pthread_destroy(structfrr_pthread*fpt);/**Getsanexistingfrr_pthreadbyit
sid.**@returnfrr_threadassociatedwiththeprovidedid,orNULLonerror*/structfrr_pthr
ead*frr_pthread_get(uint32_tid);/**Createsanewpthreadandbindsittoafrr_pthread.**
Thisfunctionisawrapperforpthread_create.Thefirstparameteristhe*frr_pthreadtobind
thecreatedpthreadto.Allsubsequentargumentsare*passedunmodifiedtopthread_create()
.Thefrr_pthread*providedwillbe*usedastheargumenttothepthreadentryfunction.Ifitis
necessaryto*passadditionaldata,the'data'fieldinthefrr_pthreadmaybeused.**Thisfun
ctionreturnsthesamecodeaspthread_create().Ifthevalueis*zero,theprovidedfrr_pthre
adisboundtoarunningPOSIXthread.Ifthe*valueislessthanzero,theprovidedfrr_pthreadi
sguaranteedtobea*cleaninstancethatmaybesusbsequentlypassedtofrr_pthread_run().**
@paramfpt-frr_pthread*torun*@paramattr-seepthread_create(3)**@returnseepthread_c
reate(3)*/intfrr_pthread_run(structfrr_pthread*fpt,constpthread_attr_t*attr);/**
Waitsuntilthespecifiedpthreadhasfinishedsettingupandisreadyto*beginwork.**Ifthep
thread'scodemakesuseofthestartupsynchronizationmechanism,*thisfunctionshouldbeca
lledbeforeattemptingtousethefunctionality*exposedbythepthread.Itwaitsuntilthe'ru
nning'conditionissatisfied*(seestructdefinitionoffrr_pthread).**@paramfpt-thefrr
_pthread*towaiton*/voidfrr_pthread_wait_running(structfrr_pthread*fpt);/**Notifi
esotherpthreadsthatthecallingthreadhasfinishedsettingupand*isreadytobeginwork.**
Thiswillallowanyotherpthreadswaitingin'frr_pthread_wait_running'to*proceed.**@pa
ramfpt-thefrr_pthread*thathasfinishedsettingup*/voidfrr_pthread_notify_running(s
tructfrr_pthread*fpt);/**Stopsafrr_pthreadwitharesult.**@paramfpt-frr_pthread*to
stop*@paramresult-wheretostorethethread'sresult,ifany.MaybeNULLifa*resultisnotne
eded.*/intfrr_pthread_stop(structfrr_pthread*fpt,void**result);/*Stopsallfrr_pth
read's.*/voidfrr_pthread_stop_all(void);/*Yieldsthecurrentthreadofexecution*/voi
dfrr_pthread_yield(void);/**Returnsauniqueidentifierforusewithfrr_pthread_new().
**Internally,thisisanintegerthatincrementsaftereachcalltothis*function.Becauseth
enumberofpthreadscreatedshouldneverexceedINT_MAX*duringthelifeoftheprogram,there
isnooverflowprotection.Ifby*chancethisfunctionreturnsanIDwhichisalreadyinuse,*fr
r_pthread_new()willfailwhenitisprovided.**@returnuniqueidentifier*/uint32_tfrr_p
thread_get_id(void);#endif/*_FRR_PTHREAD_H*/