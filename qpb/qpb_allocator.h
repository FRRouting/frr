/**qpb_allocator.h**@copyrightCopyright(C)2016SprouteNetworks,Inc.**@authorAvnee
shSachdev<avneesh@sproute.com>**ThisfileispartofQuagga.**Quaggaisfreesoftware;yo
ucanredistributeitand/ormodifyit*underthetermsoftheGNUGeneralPublicLicenseaspubl
ishedbythe*FreeSoftwareFoundation;eitherversion2,or(atyouroption)any*laterversio
n.**Quaggaisdistributedinthehopethatitwillbeuseful,but*WITHOUTANYWARRANTY;withou
teventheimpliedwarrantyof*MERCHANTABILITYorFITNESSFORAPARTICULARPURPOSE.SeetheGN
U*GeneralPublicLicenseformoredetails.**YoushouldhavereceivedacopyoftheGNUGeneral
PublicLicensealong*withthisprogram;seethefileCOPYING;ifnot,writetotheFreeSoftwar
e*Foundation,Inc.,51FranklinSt,FifthFloor,Boston,MA02110-1301USA*//**Headerfilef
orQuagga/FRRprotobufmemorymanagementcode.*/#ifndef_QPB_ALLOCATOR_H_#define_QPB_A
LLOCATOR_H_#include<google/protobuf-c/protobuf-c.h>structlinear_allocator_t_;/**
AliasforProtobufCAllocatorthatiseasieronthefingers.*/typedefProtobufCAllocatorqp
b_allocator_t;/**qpb_alloc*/staticinlinevoid*qpb_alloc(qpb_allocator_t*allocator
,size_tsize){returnallocator->alloc(allocator->allocator_data,size);}/**qpb_allo
c_ptr_array**Allocatespaceforthespecifiednumberofpointers.*/staticinlinevoid*qpb
_alloc_ptr_array(qpb_allocator_t*allocator,size_tnum_ptrs){returnqpb_alloc(alloc
ator,num_ptrs*sizeof(void*));}/**qpb_free*/staticinlinevoidqpb_free(qpb_allocato
r_t*allocator,void*ptr){allocator->free(allocator->allocator_data,ptr);}/**QPB_A
LLOC**Conveniencemacrotoreducetheprobabilityofallocatingmemoryof*incorrectsize.I
treturnsenoughmemorytostorethegiventype,*andevaluatestoanappropriatelytypedpoint
er.*/#defineQPB_ALLOC(allocator,type)(type*)qpb_alloc(allocator,sizeof(type))/**
Externs.*/externvoidqpb_allocator_init_linear(qpb_allocator_t*,structlinear_allo
cator_t_*);/**Thefollowingmacrosareforthecommoncasewhereaqpballocator*isbeinguse
dalongsidealinearallocatorthatallocatesmemory*offofthestack.*/#defineQPB_DECLARE
_STACK_ALLOCATOR(allocator,size)\qpb_allocator_tallocator;\linear_allocator_tlin
_##allocator;\charlin_##allocator##_buf[size]#defineQPB_INIT_STACK_ALLOCATOR(all
ocator)\do{\linear_allocator_init(&(lin_##allocator),\lin_##allocator##_buf,\siz
eof(lin_##allocator##_buf));\qpb_allocator_init_linear(&allocator,&(lin_##alloca
tor));\}while(0)#defineQPB_RESET_STACK_ALLOCATOR(allocator)\do{\linear_allocator
_reset(&(lin_##allocator));\}while(0)#endif/*_QPB_ALLOCATOR_H_*/