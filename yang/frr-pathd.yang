module frr-pathd {
  yang-version 1.1;
  namespace "http://frrouting.org/yang/pathd";
  prefix frr-pathd;

  import ietf-inet-types {
    prefix inet;
  }
  import ietf-yang-types {
    prefix yang;
  }
  import ietf-routing-types {
    prefix rt-types;
  }
  import frr-interface {
    prefix frr-interface;
  }

  organization
    "Free Range Routing";
  contact
    "FRR Users List:       <mailto:frog@lists.frrouting.org>
     FRR Development List: <mailto:dev@lists.frrouting.org>";
  description
    "This module defines a model for managing FRR pathd daemon.";

  revision 2018-11-06 {
    description
      "Initial revision.";
  }

  container pathd {
    list segment-list {
      description
        "List of SIDs for Candidate Paths.";
      key "name";
      leaf name {
        description
          "List name.";
        type string;
      }
      leaf-list label {
        description
          "List of MPLS labels.";
        type rt-types:mpls-label;
        ordered-by user;
      }
    }
    list sr-policy {
      key "name";
      leaf name {
        type string;
        description
          "Name of the SR Policy.";
      }
      leaf color {
        type uint32;
        description
          "Color of the SR Policy.";
      }
      leaf endpoint {
        type inet:ip-address;
        description
          "Indication for the endpoint of the SR Policy.";
      }
      leaf binding-sid {
        type rt-types:mpls-label;
        description
          "BSID of the SR Policy.";
      }
      list candidate-path {
        must "../color and ../endpoint and ../binding-sid";
        description
          "List of Candidate Paths of the SR Policy.";
        key "preference";
        leaf preference {
          type uint32;
          description
            "Administrative preference.";
        }
        leaf protocol-origin {
          description
            "Indication for the protocol origin of the Candidate Path.";
          mandatory true;
          type enumeration {
            enum pcep;
            enum bgp;
            enum config;
          }
        }
        leaf originator {
          type inet:ip-address;
          description
            "Indication for the endpoint of the origin of the Candidate Path.";
          mandatory true;
        }
        leaf dynamic-flag {
          description
            "Flag for explicit or dynamic path.";
          mandatory true;
          type boolean;
        }
        leaf segment-list-name {
          description
            "The name of the Segment List to use as LSP.";
          mandatory true;
          type leafref {
            path ../../../segment-list/name;
          }
        }
      }
    }
  }
}
