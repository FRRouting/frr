#
# ospfclient
#

if OSPFCLIENT
lib_LTLIBRARIES += ospfclient/libfrrospfapiclient.la
noinst_PROGRAMS += ospfclient/ospfclient
#man8 += $(MANBUILD)/frr-ospfclient.8

sbin_SCRIPTS += \
	ospfclient/ospfclient.py \
	# end
endif

ospfclient_libfrrospfapiclient_la_LDFLAGS = $(LIB_LDFLAGS) -version-info 0:0:0
ospfclient_libfrrospfapiclient_la_LIBADD = lib/libfrr.la
ospfclient_libfrrospfapiclient_la_SOURCES = \
	ospfclient/ospf_apiclient.c \
	# end

if OSPFCLIENT
ospfapiheaderdir = $(pkgincludedir)/ospfapi
ospfapiheader_HEADERS = \
	ospfclient/ospf_apiclient.h \
	# end
endif

ospfclient_ospfclient_LDADD = \
	ospfclient/libfrrospfapiclient.la \
	ospfd/libfrrospfclient.a \
	$(LIBCAP) \
	# end

if STATIC_BIN
# libfrr is linked in through libfrrospfapiclient.  If we list it here too,
# it gets linked twice and we get a ton of symbol collisions.

else # !STATIC_BIN
# For most systems we don't need this, except Debian, who patch their linker
# to disallow transitive references *while* *als* not patching their libtool
# to work appropriately.  RedHat has the same linker behaviour, but things
# work as expected since they also patch libtool.
ospfclient_ospfclient_LDADD += lib/libfrr.la
endif

ospfclient_ospfclient_SOURCES = \
	ospfclient/ospfclient.c \
	# end

EXTRA_DIST += \
	ospfclient/ospfclient.py \
	# end
